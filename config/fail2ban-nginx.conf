# Fail2Ban Configuration for Nginx
# This file should be placed in /etc/fail2ban/jail.d/nginx.conf
# It provides protection against various types of attacks on your web application

[DEFAULT]
# Default settings for all jails
ignoreip = 127.0.0.1/8 ::1
bantime = 3600
findtime = 600
maxretry = 3
backend = auto
usedns = warn
logencoding = auto
enabled = false
mode = normal
filter = %(__name__)s[mode=%(mode)s]

# Email notifications (optional)
# destemail = admin@yourdomain.com
# sender = fail2ban@yourdomain.com
# mta = sendmail
# action = %(action_mwl)s

# =============================================================================
# NGINX JAILS
# =============================================================================

# Nginx HTTP Authentication
[nginx-http-auth]
enabled = true
port = http,https
logpath = /var/log/nginx/error.log
maxretry = 3
bantime = 3600
findtime = 600

# Nginx 404 errors (potential scanning)
[nginx-noscript]
enabled = true
port = http,https
logpath = /var/log/nginx/access.log
maxretry = 6
bantime = 86400
findtime = 600
filter = nginx-noscript

# Nginx bad bots
[nginx-badbots]
enabled = true
port = http,https
logpath = /var/log/nginx/access.log
maxretry = 2
bantime = 86400
findtime = 600
filter = nginx-badbots

# Nginx proxy attacks
[nginx-noproxy]
enabled = true
port = http,https
logpath = /var/log/nginx/access.log
maxretry = 2
bantime = 86400
findtime = 600
filter = nginx-noproxy

# Nginx limit request (rate limiting violations)
[nginx-limit-req]
enabled = true
port = http,https
logpath = /var/log/nginx/error.log
maxretry = 10
bantime = 3600
findtime = 600
filter = nginx-limit-req

# =============================================================================
# APPLICATION-SPECIFIC JAILS
# =============================================================================

# Failed login attempts
[myapp-auth]
enabled = true
port = http,https
logpath = /var/log/nginx/access.log
          /var/log/myapp/app.log
maxretry = 5
bantime = 1800
findtime = 600
filter = myapp-auth

# API abuse
[myapp-api-abuse]
enabled = true
port = http,https
logpath = /var/log/nginx/access.log
maxretry = 20
bantime = 3600
findtime = 300
filter = myapp-api-abuse

# Registration spam
[myapp-registration-spam]
enabled = true
port = http,https
logpath = /var/log/nginx/access.log
          /var/log/myapp/app.log
maxretry = 3
bantime = 86400
findtime = 3600
filter = myapp-registration-spam

# =============================================================================
# SSH PROTECTION
# =============================================================================

# SSH brute force protection
[sshd]
enabled = true
port = ssh
logpath = /var/log/auth.log
maxretry = 3
bantime = 3600
findtime = 600

# SSH aggressive mode (more sensitive)
[sshd-aggressive]
enabled = false
port = ssh
logpath = /var/log/auth.log
maxretry = 1
bantime = 86400
findtime = 600
filter = sshd[mode=aggressive]

# =============================================================================
# SYSTEM PROTECTION
# =============================================================================

# Postfix SMTP auth
[postfix-auth]
enabled = false
port = smtp,465,submission
logpath = /var/log/mail.log
maxretry = 3
bantime = 3600
findtime = 600

# FTP brute force
[vsftpd]
enabled = false
port = ftp,ftp-data,ftps,ftps-data
logpath = /var/log/vsftpd.log
maxretry = 3
bantime = 3600
findtime = 600

# =============================================================================
# CUSTOM FILTERS
# =============================================================================

# The following filters need to be created in /etc/fail2ban/filter.d/

# Filter: myapp-auth.conf
# [Definition]
# failregex = ^<HOST> - .* "POST /api/auth/login HTTP/.*" 401 .*$
#             ^<HOST> - .* "POST /auth/login HTTP/.*" 401 .*$
#             ^<HOST> - .* "POST /login HTTP/.*" 401 .*$
# ignoreregex =

# Filter: myapp-api-abuse.conf
# [Definition]
# failregex = ^<HOST> - .* "(GET|POST|PUT|DELETE) /api/.* HTTP/.*" (429|403) .*$
# ignoreregex =

# Filter: myapp-registration-spam.conf
# [Definition]
# failregex = ^<HOST> - .* "POST /api/auth/register HTTP/.*" 400 .*$
#             ^<HOST> - .* "POST /register HTTP/.*" 400 .*$
# ignoreregex =

# =============================================================================
# ADVANCED SETTINGS
# =============================================================================

# Recidive jail (repeat offenders)
[recidive]
enabled = true
logpath = /var/log/fail2ban.log
banaction = %(banaction_allports)s
bantime = 604800  ; 1 week
findtime = 86400  ; 1 day
maxretry = 5
filter = recidive

# =============================================================================
# NOTIFICATION ACTIONS
# =============================================================================

# Slack notification action
# Create /etc/fail2ban/action.d/slack.conf:
# [Definition]
# actionstart = curl -X POST -H 'Content-type: application/json' --data '{"text":"Fail2Ban started on `hostname`"}' <slack_webhook_url>
# actionstop = curl -X POST -H 'Content-type: application/json' --data '{"text":"Fail2Ban stopped on `hostname`"}' <slack_webhook_url>
# actioncheck =
# actionban = curl -X POST -H 'Content-type: application/json' --data '{"text":"ðŸš« Fail2Ban banned IP <ip> on `hostname` for jail <name>"}' <slack_webhook_url>
# actionunban = curl -X POST -H 'Content-type: application/json' --data '{"text":"âœ… Fail2Ban unbanned IP <ip> on `hostname` for jail <name>"}' <slack_webhook_url>

# Email notification with geolocation
# [myapp-auth-email]
# enabled = true
# port = http,https
# logpath = /var/log/nginx/access.log
# maxretry = 5
# bantime = 1800
# findtime = 600
# filter = myapp-auth
# action = %(action_mwl)s
#          slack[slack_webhook_url="https://hooks.slack.com/services/YOUR/SLACK/WEBHOOK"]

# =============================================================================
# WHITELIST CONFIGURATION
# =============================================================================

# Add trusted IPs to ignoreip in [DEFAULT] section above
# Examples:
# ignoreip = 127.0.0.1/8 ::1 192.168.1.0/24 10.0.0.0/8

# For dynamic whitelisting, create /etc/fail2ban/jail.d/whitelist.conf:
# [DEFAULT]
# ignorecommand = /etc/fail2ban/scripts/whitelist-check.sh <ip>

# =============================================================================
# MONITORING AND MAINTENANCE
# =============================================================================

# Log rotation is handled by logrotate
# Create /etc/logrotate.d/fail2ban:
# /var/log/fail2ban.log {
#     weekly
#     missingok
#     rotate 4
#     compress
#     delaycompress
#     postrotate
#         /bin/systemctl reload fail2ban > /dev/null 2>&1 || true
#     endscript
# }

# =============================================================================
# TESTING AND DEBUGGING
# =============================================================================

# Test fail2ban configuration:
# sudo fail2ban-client -t

# Check jail status:
# sudo fail2ban-client status
# sudo fail2ban-client status nginx-http-auth

# Manually ban/unban IP:
# sudo fail2ban-client set nginx-http-auth banip 192.168.1.100
# sudo fail2ban-client set nginx-http-auth unbanip 192.168.1.100

# View banned IPs:
# sudo fail2ban-client get nginx-http-auth banned

# Test regex patterns:
# fail2ban-regex /var/log/nginx/access.log /etc/fail2ban/filter.d/nginx-http-auth.conf

# =============================================================================
# PERFORMANCE TUNING
# =============================================================================

# For high-traffic sites, consider:
# - Increasing findtime and bantime
# - Using database backend instead of files
# - Implementing rate limiting at application level
# - Using CDN with DDoS protection

# Database backend configuration (optional):
# [DEFAULT]
# dbfile = /var/lib/fail2ban/fail2ban.sqlite3
# dbpurgeage = 86400